23:57 2008-2-25 服务器的最基本的向浏览器输出HTML代码和图片的功能已经实现。其中也对浏览器的GET请求有了初步的分析能力:httpserver.ClientRequest类对其进行分析。但是对服务器端的HTML文件还不具有代码分析能力，只能原样的发送给浏览器，今后应该解决这个问题。........

2008-2-26 0:03:59 对HTML文件不能分析代码的问题试图进行解决,没完成...........

0:17 2008-2-27 发现只用对HTML文件中的JSP动态代码部分进行分析，对JSP的类库所属问题进行查看，结果未全，待进一步完成。.............

14:21 2008-2-28 对JSP代码有初步分析能力.但在动态加载类方面遇到困难,将JSP编译成类后,无法自动运行它.在测试中发现,servlet的方法为protected!!!,发现service方法

21:49 2008-2-28 在加入JSP处理能力以后,Server变得处里并发能力很差:每一次browser请求都要重新编译?

12:06 2008-3-2 发现server的处理一般HTML语言的post get参数的无能,暂停jsp的读取,开始考虑参数.然而post传的参数无法接收

18:04 2008-3-4 post的传参规律基本了解,但是各浏览器的格式不同,等待了解POST标准.继续考虑对HTML代码的解释.

23:40 2008-3-5 对类文件的动态加载问题基本解决,开始对javax.servlet包的各个细节关注.把原来的CilentRequest类改为了ZhangServletRequest implements javax.servlet.ServletRequest 在原来的基础上使其能和Servlet融合.此工作待继续.

19:47 2008-3-6 不支持CSS; 没有并行优化

19:36 2008-3-12 开始着手对XML的读取和使用,使其能对web.xml等配置文件进行读取和分析，完成。

23:24 2008-3-15 准备将服务器作成只有一个JSP工作，对自己工作难度的适当降低。如果要实现多应用JSP容器，要对容器与请求唯一关联起来。

11:26 2008-3-17 jsp标记<%! <% 有不同的意义，他们应该被放在Servlet的不同的位置<%! 放在属性位置.对jsp的getAttibution还无能为力。对<%taglib也无能为力。成功。

0:05 2008-3-18 jsp隐式函数没有很好的提供。同时，Servlet提供的out是PrintWriter类型的，无法很好的支持不同的字符集。计划用ZhangWriter来包装。成功。

0:54 2008-3-19 ZhangReader在读一个关闭的流时,会一直读入'?',这是int转成char造成的低级错误.

23:05 2008-3-20 ZhangHttpContext中的上下文属性用了两个集合来储存,一个是HashMap一个是ArrayList.后者来存Name.这是一种低效的方法,未来应该改进.ServletContext中的getContext(String sstring)方法的用处我相当不解。。。。。。。。。

0:26 2008-3-24 HttpServlet.getServletContext()不是抽象方法.为什么?.在new一个HttpServlet的子类时,抛出java.util.MissingResourceException!!!!!

13:26 2008-3-25 BufferedWriter的性能似乎有问题.

1:01 2008-3-26 上面的问题好像暂时无故消失了!本次工作为完成类Complier2的编写

0:45 2008-3-27 可以运行一部份JSP功能了.但是发现一个重要问题.不支持<%= %>的格式!!!!!并且还不能处理POST

16:43 2008-3-27 JAVA的进程调用出现问题.在调用javac时好像是出现了死锁.

22:26 2008-3-27 用一个SUN提供的编译工具替代了使用JAVAC进程.新的问题是ZhangRequest一些方法没有完善.使jsp得到一些参数时出错null.解决.

15:53 2008-3-31天啊,

23:26 2008-3-31 初略的写了一个Servlet容器.用静态方法来使各类不用使用它的引用就能访问Servlet.适合一个服务器只有一个应用的情况.目前还缺少一个独立的线程来管理容器中的这些Servlet,使在内存中Servlet数量过大时删掉一些少用的Servlet.因为有了Servlet容器.使得浏览器访问Servlet速度增强.目前图片和静态网页和CSS的读取速度成为了瓶颈,有必要创建一个类似的资源容器.对于在Servlet内建的上下文类,在删掉它时也要把它创的类删掉.如果要实现对资源的读取,则要将整个文件的二进制代码读入内存.储存资源的容器要有一个方法能返回在内存中数据的总大小.内存映射技术.

0:25 2008-4-3 内存映射有效.把ServerThread的几个Send方法规范了并合并成了一个toResponse方法.对RequestDispacth进行了包装,对ServletOutputStream进行了包装.包装后进行实验出现问题,等待解决

10:37 2008-4-3 RequestDispacth包装可能成功.目前在重写HttpServletResponse.sendRedirct

16:04 2008-4-3 不知道在RequestDispatcher后,两个不同的request的同名参数有不同值时会有什么效果。。。。。。。

22:17 2008-04-09 一段时间内在使用Linux.将httpserver移于Linux时出现了一个路途分隔符不同的问题.(在LINUX下是':', 在WINDOWS下是';').在WINDOWS下的中文字符显示不正确.代码文件的中文代码也不能正常显示.期间进行了下载过程的模拟.将整个服务器做成了一个基于UTF-8字符集的服务器.断点续传问题还没有解决.

00:53 10-04-2008 FireFox的POST参数接收不好,它不直接发送参数,好像是要等待某个条件后才会发送参数.有等解决

21:09 2008-04-10 FireFox的POST参数没有换行符，所以ZhangReader.readNext()方法对它无效，改为readByLength(int codeCount), 其中codeCout来至于浏览器的请求头部。修改了readByLength(int codeCout)的BUG；修改了ZhangWriter.print系列的BUG.print系列不能直接调用writer.write系列的方法,因为这个第列的方法不能接收null的参数,而print系列的可以.所以在print系列的调用write系列之前,要对参数进行检查.(可能以前的ZhangWriter的BufferedWriter包装有BUG也和这个问题有关,应该再主将其包装,比较有效率)可以初步处理POST请求的参数了,但是还没测试有转义字符的POST参数(不知POST参数有没有转义字符).另一方面,httpserver没有产生HTTP回应头的能力.文件输入流关闭以后,文件映射还有没有效果...不知道关闭输入输出流与关闭Socket的关系如何.

00:57 2008-04-12 JAVA字符代码的问题一直没有解决。从浏览器接收的UTF-8的参数,换义永远是乱码....在调试中发现JAVA的内部字符编码可能是UTF-8,因为String.getBytes()和
String.getBytes("UTF-8")的返回的byte[]是一样的,与String.getBytes("UTF-16")却不同.

00:29 2008-04-13  将浏览器传来的十六进制转义字符强转为byte所做成的byte数组传给String的构造器,使UTF-8的参数能接收了.但是服务器从头到尾只能接收和发送UTF-8格式的字符.是一个很大的局限性.将来应该解决.服务器应该彻底的做一次对Socket的关闭问题的检查.

01:11 2008-04-14 把ServerThread类的码代优化了一下。目前没有测试与数据库的连接。突然在想，这个服务器是不是应该与J2EE的其它技术融合。还有一个想法就是，能不能把服务器更完全的与数据库结合起来，比如说，httpserver的所有页面和资源都不是以文件的形式存在，而是在原文件的源码部署完毕后，全部存入了数据库，而不是像现在一样在内存中。在数据库的好处是让数据库承担一部份的并发压力，让服务器集中注意力来分析浏览器的请求和动态状态。也让服务器和数据源（数据库）分开（可以是在不同的主机中）创造条件。这个只是一个想法。在完全服务器的功能再于与考虑。服务器的同步问题。

11:03 2008-04-23 考试中断了几天。重新开始。发现服务器解决POST问题后,依然无法很好的支持动态网页.服务器相互交流的JSESSION问题有处理Cookies的问题服务器没有任何的处理功能.

15:23 2008-05-02 发生了太好玩的事了，停了几天。继续处理SESSION问题，开始写sendHeader()方法，准备写几个重载的sendHeader()的方法来控制回复头，这样能处理session id的问题。将来的ZhangHttpRequest也要有接收来至于Cookies的能力。

